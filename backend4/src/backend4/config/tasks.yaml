# structure_designer

models_planning_task:
  description: >
    Customer thoughts: {customer}
    1) Read and interpret the customer's domain requirements for {topic}.
    2) Propose a database schema focusing on models/entities, their fields, 
       and any relevant relationships (e.g. foreign keys).
    3) Each model should list the fields needed, including data types or constraints 
       if relevant (e.g. "name: string", "age: integer").
       - By default, each primary key should be defined as an auto-increment integer
         unless the customer specifically wants a different approach (like UUID or string).
       - If you define a foreign key (e.g., `team_id` referencing `teams.id`),
         make sure the foreign key column's type matches the primary key's type.
         For example, if `teams.id` is an integer, `players.team_id` must also be integer.
       - Use the String type for Dates.
    4) If the "customer" mentions extra data (like addresses), factor that in 
       (possibly as a separate model).
    5) The final output must NOT contain any code. Provide only a structured outline 
       (in text or Markdown bullets) of the models and how they link together.
    6) You should use the "data_object_lookup" Tool to help you define the models
       - You can modify the Fields to match the requirements of the customer.
    Important instructions:
      - Only define the models, don't define any CRUD Endpoints
  expected_output: >
    Your final answer must be the "Database Schema", listing all models with their fields/relationships
      - No code, only text.
  agent: structure_designer
  output_file: Output/models_plan.md



routes_planning_task:
  description: >
    Customer toughts: {customer}
    1) Read the domain requirements for {topic} and any established models 
       (The Context you got is the database schema for the application).
    2) Outline the main REST endpoints you recommend: 
       e.g., GET/POST/PUT/DELETE for each model, plus any special routes (like 
       "GET /teams/<id>/players" or "GET /players/country/<country>").
    3) Include what kind of request body or query parameters each route might need, 
       and what responses they return (basic idea).
    4) Do NOT write any code. Only provide a structured text plan 
       that the code_creator can later implement in Flask.
    5) You are no longer allowed to use the "data_object_lookup" Tool
  expected_output: >
    Your final answer must be the "Routes Plan", enumerating each endpoint, 
    the HTTP method(s), and what data is needed.
      - No code, only text.
      - Don't relist the already mentioned models in your final answer.
  agent: structure_designer
  output_file: Output/app_plan.md

# code_creator

backend_models_task:
  description: >
    main goal: A fully fletched python backend application with a Flask API and a SQLite database.
    
    current Task: create a Output/models.py file with the following instructions:
    1) Use the "FileReaderTool" tool exactly once to read the "files/templates/models_template.py" file 
      Then strictly follow that template's structure, 
      only filling in the designated placeholders (examples) with your actual model definitions.
    2) Implement the models as per the database schema you recieved in your context.
      Each Model should have all the fields as per the database schema
      and have a "to_dict" Method.
  expected_output: >
    Your Final answer must be the full Output/models.py file, only the python code and nothing else.
    The code must not be in any quotes e.g. """<code>""".
  agent: code_creator
  context: [models_planning_task]
  output_file: Output/models.py

backend_app_task:
  description: >
    main goal: A fully fletched python backend application with a Flask API and a SQLite database.

    current Task: create an Output/app.py file with the  following instructions:
    1) Use the "FileReaderTool" tool exactly once to read the "files/templates/app_template.py" file
      Then strictly follow that template's structure, 
      only filling in the designated placeholders with your code (example).
      You must import all the models from your context.
    2) Implement the endpoints as per the "routes plan" from your context..
      The resulting "Output/app.py" must:
      - import the models from the models.py file.
      - have every route as per the routes plan.
      - be fully operational and error free.

    More instructions:
      - Never define your own Models, import and use the models from the context you got 
  expected_output: >
    Your Final answer must be the full Output/app.py file, only the python code and nothing else.
    The code must not be in any quotes e.g. """<code>""".
  agent: code_creator
  context: [backend_models_task, routes_planning_task]
  output_file: Output/app.py

pause_task:
  description: >
    Wait for the user to confirm that the Output/app.py and Output/models.py file is correct and operational.
  expected_output: >
    Confirmed that the user has reviewed the current files and pressed ENTER to continue.
  human_input: true
  agent: code_creator

# code_tester

backend_endpoint_summary_task:
  description: >
    Read Output/app.py using the FileReaderTool.
    Summarize all the Flask routes by scanning each @app.route(...).
    1) List every route's URL pattern (e.g., /teams, /teams/<id>) 
       and each HTTP method it handles (GET, POST, PUT, DELETE, etc.).
    2) For each POST or PUT route, specify which JSON fields it expects if known.
    3) Present them in the order they should be tested:
       All POST routes for each Model first, then GET, then PUT, then DELETE.
       It is extremely important to follow this order and do the POST methods first and the
       Delete Methods last.
    4) Do not write code; only produce a textual or Markdown list. 
    5) Do not use any tools for this task.
  expected_output: >
    Your final answer must be a numbered summary of each route, including:
      - The HTTP method(s)
      - The path (with path parameters if any)
      - The required JSON fields for POST/PUT
      - Any response details you can infer.
    Example:
      "1. POST /teams -> Needs { name: string, city: string, country: string, stadium: string } 
       Returns the newly created team data."
  agent: code_tester
  output_file: 'Output/endpoint_summary.md'

backend_test_task:
  description: >
    Use the "flask_test_client" tool to test the backend application based on the endpoint summary in your context.
    
    Your responsibilities:
      1. Read the endpoint summary carefully.
         For each route listed, construct an HTTP request definition.
         **Important:**
         - Use the key `"route"` for the URL path (not `"path"`).
         - Use `"json_data"` for the JSON body (do not pass a stringified JSON; pass an actual JSON object).
         - For routes that require a JSON body (POST/PUT), include a valid JSON object based on the expected fields.
         - For routes with URL parameters (e.g., `/teams/<id>`), use `1` as a default value (e.g., `/teams/1`).
      2. Combine all request definitions into a single list and pass them to the tool in one bulk call.
         - All POST routes first, then GET, then PUT, then DELETE.
         - It is extremely important to follow this order.
      3. After the tool executes the tests, produce a Markdown report that summarizes:
         - For each request: method, route, payload (if any), status code, and a brief summary of the response.
         - Clearly indicate if a request failed (e.g., with a ❌ marker).
  expected_output: >
    Your final answere must be a Markdown report that includes:
      - A section for each tested request.
      - The HTTP method and route.
      - The JSON payload (if applicable).
      - The status code and a summary of the response.
      - A clear indication (e.g., ❌) if a request failed.
    Example:
      ### POST /teams
      Payload: {"name": "Test FC", "city": "Berlin", "country": "Germany", "stadium": "Olympiastadion"}
      Result: ✅ 201 Created
      Response: { "id": 1, ... }
      
      ### PUT /teams/1
      Payload: {"name": "Updated FC"}
      Result: ❌ 500 Internal Server Error
      Response: Missing field "city"
  agent: code_tester
  context: [backend_endpoint_summary_task]
  output_file: 'Output/test_report.md'

# bug_fixer

analyze_failed_requests_task:
  description: >
    Read the file 'Output/test_report.md' and identify each request that failed (❌).
    Then, read both 'Output/models.py' and 'Output/app.py' to determine what might have caused the failure.

    For each failed request:
      - Match it to the code sections in models.py or app.py.
      - Determine if the issue is due to missing fields, wrong data types, missing routes, or logic bugs.
      - Propose how to fix it.
    You are not fixing the bug yet. Your job is only to isolate the issue and create a plan.

  expected_output: >
    Your final output must be a Markdown file titled "Bug Fix Plan",
    listing each ❌ failed request, the likely root cause, and what changes are needed
    (which file and what code section to fix).

    Format example:
    ---
    ❌ PUT /teams/1
    Cause: Missing field "city" not handled in PUT route
    Fix: Add support for 'city' in PUT handler in app.py

    ❌ POST /players
    Cause: Model 'Player' missing 'position' field
    Fix: Add 'position = db.String' to Player class in models.py
    ---

  agent: bug_fixer
  context: [backend_test_task]
  output_file: Output/fix_plan.md

fix_code_task:
  description: >
    Use the bug fix plan from your context to modify the files 'Output/models.py' and/or 'Output/app.py'.
    You must:
      - Read both files first using the FileReaderTool
      - Apply only the fixes that are clearly defined in the fix plan
      - Preserve all existing code not related to the bug
      - Use FileWriterTool to write your fixed version back to the same path

  expected_output: >
    Your final answer must confirm:
    - What file(s) were changed
    - What sections were modified
    - The final confirmation of write success (e.g. "models.py updated successfully.")

  agent: bug_fixer
  context: [analyze_failed_requests_task]
  output_file: Output/fix_summary.md
