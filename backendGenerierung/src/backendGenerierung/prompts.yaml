football:
  topic: Football
  customer: |
    I want to save my football team and player data.
    Every team has a name, a city, a country, and a stadium.
    Every player has a name, a position, a team, and a country.

library:
  topic: Library
  customer: |
    I want to manage a small public library.
    Books have a title, author, ISBN, genre, publication year and a flag whether they are currently borrowed.
    Members have a name, e-mail address, membership number, and a date when their membership expires.
    Each loan should track the book, the member, a checkout date and a due date.
    I'd like endpoints to:
      - add / edit / delete books and members
      - borrow and return a book
      - list overdue loans
      - search books by title or author

car_rental:
  topic: Car Rental Service
  customer: |
    I need a backend for managing a multi-branch car-rental company.

    ►  Core entities
      • Car        : plate_no, brand, model, year, category (compact, SUV, van ...),
                     seats, transmission (auto/manual), fuel_type, daily_rate,
                     current_odometer, status (available, rented, service), location_id
      • Location   : name, address, city, country, phone
      • Customer   : customer_id, name, email, phone, driver_license_no,
                     license_expiry, vip (bool)
      • Rental     : rental_id, car_plate_no, customer_id,
                     pickup_location_id, dropoff_location_id,
                     pickup_date, dropoff_date, daily_rate_snapshot,
                     total_price, status (active, closed, cancelled)
      • Payment    : payment_id, rental_id, amount, method (card, cash),
                     paid_at, refunded (bool)
      • Service    : service_id, car_plate_no, service_type (oil, tires, repair),
                     start_date, end_date, cost, notes

    ►  Must-have features
      1. CRUD for all entities above.
      2. **Book a rental**:
         - choose car by category, dates and pickup location
         - lock car (status → “rented”), create Rental record with total_price.
      3. **Return a car**:
         - mark Rental as “closed”, update car status to “available”,
           update odometer and current location.
      4. **Cancel rental** (if it hasn't started) → refund payment.
      5. **List cars** with filters:
         - by location, category, seats, transmission, price range
      6. **Service workflow**:
         - move car to “service”, create Service entry,
           car becomes bookable only after service “end_date”.
      7. **Analytics endpoints**:
         - revenue per month
         - utilisation rate (% days rented) per car category
      8. Search endpoints:
         - `/customers/search/<string:name>`
         - `/cars/search/<string:plate_or_model>`

car_rental_short:
  topic: Car Rental Service
  customer: |
    Build a backend for a car-rental business with several branches.
    We need to store cars, customers, rentals, payments and service jobs.
    Basic CRUD plus endpoints to book, return and cancel a rental.
    Also some search and revenue stats would be nice.

hinderks:
  topic: Thesis Management Application
  customer: |
    Overview
    A comprehensive web application designed for professors to manage, track, and document various types of academic theses including seminar, bachelor, master, and PhD theses. The application focuses on efficient thesis supervision, meeting management, and deadline tracking.

    Core Features:

    1. Thesis Record Management
    Each thesis record contains the following information:
    Thesis Type: Seminar, Bachelor, Master, or PhD
    Title: Thesis title
    Description: Detailed description of the thesis
    Student Information:
    - Student Name
    Supervision Details:
    - Supervisors (multiple users can be assigned)
    - Start of Supervision Date
    - Official Registration Date
    - Submission Date
    - Colloquium Date
    - Custom Deadline Date
    - Grade
    - Second Examiner

    2. Meeting Notes System
    Each thesis includes a dedicated meeting notes section:
    Meeting Note Fields:
    - Date
    - Summary/Description
    Functionality:
    - Create new meeting notes
    - Edit existing notes
    - Delete notes
    - View notes within thesis detail view

    3. Deadline Management
    Custom deadline setting per thesis
    Automated notification system:
    - In-app notifications
    - Email notifications (optional)
    - Configurable reminder periods (e.g., 7 days before deadline)

    4. User Interface
    Dashboard:
    Comprehensive thesis listing
    Advanced filtering options:
    - Thesis type
    - Status
    - Supervisor
    - Deadline proximity
    Sorting capabilities
    Visual status indicators
    Thesis Detail View:
    - Complete thesis information
    - Associated meeting notes
    - Deadline tracking
    - Supervisor management

    5. Authentication
    Email-based registration and login
    Secure authentication system