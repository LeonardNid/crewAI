demo:
  topic: Demo Application
  customer: |
    I want to create a demo application for a simple task management system.
    The application should allow users to create, get, update, and delete tasks.
    Each task should have a title, description, and status (e.g., pending, in progress, completed).

    Models: Only one model is needed for this application: Task with the following fields:
      - id (integer, auto-incremente, primary key)
      - title (string)
      - description (string)
      - status (string)
      
    Endpoints:
      - Create a new task
      - Get all tasks
      - Get a specific task by ID
      - Update a task
      - Delete a task
      - Filter tasks by status
      - Change every Task's Titel to uppercase

        


library:
  topic: Library
  customer: |
    I want to manage a small public library.
    Books have a title, author, ISBN, genre, publication year and a flag whether they are currently borrowed.
    Members have a name, e-mail address, membership number, and a date when their membership expires.
    Each loan should track the book, the member, a checkout date and a due date.
    I'd like endpoints to:
      - add / edit / delete books and members
      - borrow and return a book
      - list overdue loans
      - search books by title or author

car_rental:
  topic: Car Rental Service
  customer: |
    I need a backend for managing a multi-branch car-rental company.

    ►  Core entities
      • Car        : plate_no, brand, model, year, category (compact, SUV, van ...),
                     seats, transmission (auto/manual), fuel_type, daily_rate,
                     current_odometer, status (available, rented, service), location_id
      • Location   : name, address, city, country, phone
      • Customer   : customer_id, name, email, phone, driver_license_no,
                     license_expiry, vip (bool)
      • Rental     : rental_id, car_plate_no, customer_id,
                     pickup_location_id, dropoff_location_id,
                     pickup_date, dropoff_date, daily_rate_snapshot,
                     total_price, status (active, closed, cancelled)
      • Payment    : payment_id, rental_id, amount, method (card, cash),
                     paid_at, refunded (bool)
      • Service    : service_id, car_plate_no, service_type (oil, tires, repair),
                     start_date, end_date, cost, notes

    ►  Must-have features
      1. CRUD for all entities above.
      2. **Book a rental**:
         - choose car by category, dates and pickup location
         - lock car (status → “rented”), create Rental record with total_price.
      3. **Return a car**:
         - mark Rental as “closed”, update car status to “available”,
           update odometer and current location.
      4. **Cancel rental** (if it hasn't started) → refund payment.
      5. **List cars** with filters:
         - by location, category, seats, transmission, price range
      6. **Service workflow**:
         - move car to “service”, create Service entry,
           car becomes bookable only after service “end_date”.
      7. **Analytics endpoints**:
         - revenue per month
         - utilisation rate (% days rented) per car category
      8. Search endpoints:
         - `/customers/search/<string:name>`
         - `/cars/search/<string:plate_or_model>`

car_rental_focus:
  topic: Car Rental Service
  customer: |
    CRUD Operations:
      - Implement standard CRUD endpoints for:
        - Car (id, brand, model, category, status, plate_no, location_id, price_per_day)
        - Customer (id, name, email, phone)
        - Rental (id, customer_id, car_id, start_date, end_date, total_price, status)
        - Location (id, name, address)
    Essential Business Logic:
      - POST /rentals:
          - Create new rental
          - Automatically check and update car status to "rented"
          - Calculate rental price (price_per_day * rental_days)
          - Prevent booking if car is already rented during requested period (return HTTP 400)
      - DELETE /rentals/<id>:
          - Allow cancellation only if rental period has not yet started
          - Automatically trigger refund process (mock implementation sufficient)
      - POST /rentals/<id>/return:
          - Mark rental as completed
          - Automatically update car status to "available"
      - GET /cars_available:
          - Filter available cars by category, location, start_date, end_date
    Optional Analytics (lower priority):
      - GET /analytics/revenue: Monthly revenue summary
      - GET /analytics/utilization: Utilization rate per car category

    instructions:
      - Prioritize CRUD endpoints and essential business logic
      - Ensure endpoints return appropriate HTTP status codes
      - Clearly separate business logic from CRUD logic
      - Implement robust error handling (e.g., car availability checks)
      - Mock complex operations clearly if not fully implemented (e.g., refund)

    notes:
      - Focus strictly on the described endpoints
      - Maintain clear, modular code structure suitable for future extension
      - Adhere to REST API best practices and Python PEP8 guidelines

thesis:
  topic: Thesis Management Application
  customer: |
    Overview
    A comprehensive web application designed for professors to manage, track, and document various types of academic theses including seminar, bachelor, master, and PhD theses. The application focuses on efficient thesis supervision, meeting management, and deadline tracking.

    Core Features:

    1. Thesis Record Management
    Each thesis record contains the following information:
    Thesis Type: Seminar, Bachelor, Master, or PhD
    Title: Thesis title
    Description: Detailed description of the thesis
    Student Information:
    - Student Name
    Supervision Details:
    - Supervisors (multiple users can be assigned)
    - Start of Supervision Date
    - Official Registration Date
    - Submission Date
    - Colloquium Date
    - Custom Deadline Date
    - Grade
    - Second Examiner

    2. Meeting Notes System
    Each thesis includes a dedicated meeting notes section:
    Meeting Note Fields:
    - Date
    - Summary/Description
    Functionality:
    - Create new meeting notes
    - Edit existing notes
    - Delete notes
    - View notes within thesis detail view

    3. Deadline Management
    Custom deadline setting per thesis
    Automated notification system:
    - In-app notifications
    - Email notifications (optional)
    - Configurable reminder periods (e.g., 7 days before deadline)

    4. User Interface
    Dashboard:
    Comprehensive thesis listing
    Advanced filtering options:
    - Thesis type
    - Status
    - Supervisor
    - Deadline proximity
    Sorting capabilities
    Visual status indicators
    Thesis Detail View:
    - Complete thesis information
    - Associated meeting notes
    - Deadline tracking
    - Supervisor management

    5. Authentication
    Email-based registration and login
    Secure authentication system

thesis_focus:
  topic: Thesis Management Application
  customer: |
    Core Data Models
      - **User**: email, password, name
      - **Thesis**: type (Seminar/Bachelor/Master/PhD), title, description, student_name,
        start_supervision_date, official_registration_date, submission_date,
        colloquium_date, grade, second_examiner_id
      - **SupervisorAssignment**: link table Thesis ⟷ User, stores assignment_date
      - **MeetingNote**: attached to Thesis (date, content, optional author_id)
      - **NotificationSettings**: per User - in_app_enabled, email_enabled
      - **Deadline**: thesis_id, deadline_date
      - **ReminderPeriod**: user_id, days_before_deadline

    Essential Endpoints (CRUD & Logic)
      - `POST /users`: create new user (email, password, name)
      - `POST /users/login`: authenticate by email & password
      - `GET,PUT /users/<id>/notification_settings`: retrieve / update notification prefs
      - `GET,POST,PUT,DELETE /users/<id>/reminder_periods`: manage reminder days
      - `GET,POST /theses`: list all theses or create new thesis
      - `GET /theses/type/<string:type>`: filter by thesis type
      - `GET /theses/grade/<string:grade>`: filter by grade
      - `GET /theses/second_examiner/<int:user_id>`: filter by second examiner
      - `GET /theses/supervisor/<int:user_id>`: filter by supervisor (via SupervisorAssignment)
      - `GET /theses/deadline_proximity/<int:days>`: theses with deadlines in ≤ days
      - `GET,PUT,DELETE /theses/<int:id>`: retrieve, update or delete a thesis (cascading deletes)
      - `GET,POST,PUT /theses/<int:id>/supervisors`: list, add or replace supervisors
      - `DELETE /theses/<int:id>/supervisors/<int:user_id>`: remove supervisor
      - `GET,POST /theses/<id>/meeting_notes`: list or create meeting notes
      - `GET,PUT,DELETE /theses/<id>/meeting_notes/<note_id>`: single note ops
      - `GET,PUT /theses/<id>/deadline`: view or set a thesis deadline
      - `GET /dashboard`: aggregated thesis overview (filter/sort optional)

    Business Rules
      - Deleting a User also removes his SupervisorAssignments and NotificationSettings
      - Deleting a Thesis cascades to supervisors, meeting notes and deadline
      - A User cannot be assigned twice as supervisor to the same Thesis
      - Supervisors and second examiners must exist in the User table
      - NotificationSettings and Deadline: create only if missing (no duplicates)

    Implementation Notes
      - Use SQLAlchemy relationships with proper `cascade` options
      - Store passwords securely (hashing, e.g., bcrypt/PBKDF2)
      - Avoid circular references in JSON responses; do not serialize nested relationships recursively
      - Focus on the core supervision workflow - omit advanced analytics for this iteration
