# code_tester

backend_endpoint_summary_task:
  description: >
    **Input :**
      Here is the models.json file containing all backend models:
      """{models_json}"""
      Here is the routes.json file containing all API routes:
      """{routes_json}"""

    Your mission is to create a strict execution plan for API endpoint testing.

    1. List every route's URL (e.g., /teams, /teams/<id>) and HTTP method(s) (GET, POST, PUT, DELETE).
    
    2. For every POST and PUT method:
         - List the required JSON fields and their types based on the model schema.
         - Example: "POST /teams -> Needs { name: string, city: string }"

    3. **VERY IMPORTANT**:
         - You MUST strictly order routes for each model as follows:
           1. All POST methods first
           2. Then all GET methods
           3. Then all PUT methods
           4. Finally all DELETE methods
         - **Under no circumstances should a DELETE method appear before any GET or PUT.**

    4. Special rule for DELETE methods:
         - Analyze the `models.json` file to find dependency relationships (e.g., a Team has Players).
         - DELETE routes must be ordered so that child resources are deleted BEFORE their parents.
         - Example: DELETE all /players before DELETE /teams.
         - Failing to respect this dependency is considered a task failure.

    5. The final output must be a numbered list that follows this exact order.
         - No section headers, no unordered lists.
         - Strictly numeric and sequential (1., 2., 3., etc.)

    **CRITICAL NOTES**:
      - Breaking the POST→GET→PUT→DELETE sequence is a critical mission failure.
      - Breaking dependency order in DELETE methods is a critical mission failure.
      - Re-read your answer to verify the correct order BEFORE submitting.

  expected_output: >
    A strictly ordered Markdown list of routes, including:
      - HTTP method
      - Path (with path parameters)
      - Expected JSON fields for POST/PUT
      - Any important response details you can infer.

    Example:
      "1. POST /teams -> Needs { name: string, city: string, country: string, stadium: string }
       Returns: newly created team data."
    
    This will become the context for the next task.
  agent: code_tester
  output_file: 'Output/test_crew/endpoint_summary.md'


backend_test_task:
  description: >
    **Goal:** Produce a single JSON payload (schema = BulkTestClientInput)
    that the system will pass to the *flask_test_client* tool via guardrail.

    Steps to follow:
      1. Parse the summary and build a list `requests` where each element is
         an object with keys `method`, `route`, `json_data`.
         • Fill `json_data` with dummy data based on the model schema.
         • Use **real JSON objects** - no stringified JSON.
         • For path parameters like `<int:id>` use the value **1**.
         • For POST/PUT routes include a plausible `json_data` based on the
           listed fields.  GET/DELETE get `json_data: {}`.

      2. Order the list strictly:
            - all POST requests first
            - then all GET
            - then PUT
            - finally DELETE

      3. Output **exactly one JSON object** with this structure:

        ```jsonc
        {
          "requests": [
            { "method": "POST", "route": "/teams", "json_data": {...} },
            ...
          ]
        }
        ```

  expected_output: >
    Pure JSON only. One JSON object conforming exactly to the `BulkTestClientInput` schema.
  agent: code_tester
  context: [backend_endpoint_summary_task]
  output_file: 'Output/test_crew/test_report.md'
