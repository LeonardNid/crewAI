# ──────────────────────────────────────────────────────────────────────────────
#  BRANCH VERIFIER TASK
# ──────────────────────────────────────────────────────────────────────────────

branch_verification_task:
  description: >
    **Input :**
      Here is the routes.json file containing all API routes:
      """{routes_json}"""
      Feature checklist: 
      """{feature_checklist}"""
      These were the changes you made in your last loop:
      """{old_changes}"""
    

    Mission: Ensure every endpoint branch behaves exactly as its `description` promises. 
      You should take the feature checklist into account.
      Produce a single JSON payload (schema = BulkTestClientInput)
      that the system will pass to the *JsonPatchTool* tool via guardrail.

    Steps:
    1. Iterate over each object in `endpoints`.
       - Read the `description` (expected behaviour).
       - Inspect the *branch code* for every HTTP verb (ignore wrapper code).
       - Detect mismatches (wrong query, missing commit, no 404-check, etc.).
       - Use the idx value to identify the endpoint (e.g., `/endpoints/2`).

    2. If at least ONE mismatch exists, build a RFC-6902 patch object
       compliant with *JsonPatchToolInput*:

       ```jsonc
       {
         "file_path": "Output/backendCrew/routes.json",
         "patch": [
           { "op": "replace", "path": "/endpoints/2/branches/GET", "value": "<fixed code>" },
           { "op": "add",     "path": "/endpoints/5/methods/-",   "value": "POST" }
         ]
       }
       ```

       - **file_path must be exactly** `Output/backendCrew/routes.json`.
       - Bundle **all** fixes into the single `patch` array.

  expected_output: >
    Pure JSON only. One JSON object conforming exactly to the `JsonPatchToolInput` schema.
    { // can be 'null' when nothing to fix
      "file_path": "Output/backendCrew/routes.json",
      "patch": [ ... ] 
    }
  agent: branch_verifier
  output_file: Output/checkupCrew/refinement_Summary.json


# ──────────────────────────────────────────────────────────────────────────────
#  VERIFICATION AGENT TASK
# ──────────────────────────────────────────────────────────────────────────────

verification_task:
  description: >
    **Input :**
      Feature checklist for the customer: {feature_checklist}
      Here is the models.json file containing all backend models:
      """{models_json}"""
      routes.json file: Is provided via your context.

    **DEFECT RULES - read carefully**
      1. A feature counts as implemented if at least one endpoint
         satisfies the semantics below -
         • "Retrieve list": GET /<plural> with get_List = true
         • "Retrieve details": GET /<plural>/<id>
         • "Create": POST on the plural path
         • "Update": PUT on the id path
         • "Delete": DELETE on the id path
         • "Filter": any GET containing '/filter/' OR a path segment
           representing the filter field (e.g., /players/country/<val>)
      2. Ignore wording-variations in descriptions.
      3. json_body evaluation
         • Inspect json_body **only for POST & PUT**.
         • A json_body will be the same for POST and PUT routes. Don't
           expect different json_bodies for the same route.
         • Never demand json_body for GET or DELETE routes.
         • A json_body is valid if it contains all required fields coresponding
           to the model in the models.json file.
      4. Model relationships validation
         • For each model, check all relationships.
         • Ensure that the relationship_lines are correct.
         • Report a defect if any relationship is not correctly implemented.
      5. Every reported defect MUST include:
           - the feature number from feature_checklist.md
           - the exact endpoint path(s) inspected
           - a one-line justification
         Otherwise discard it.
      6. Do not invent additional requirements, max defects == feature count.

      Return retry: true if you find any issues, and retry: false if everything is fine.

  expected_output: >
    Pure JSON only. One JSON object conforming exactly to the `Verification` schema.
    {
      "retry": <true/false>,
      "defects": [<list of strings, or empty>]
    }
  agent: verification_agent
  context: [branch_verification_task]
  output_file: Output/checkupCrew/verification_result.json

