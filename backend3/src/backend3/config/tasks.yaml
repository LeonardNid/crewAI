backend_models_task:
  description: >
    main goal: {goal}
    the topic of the application: {topic}
    customers thoughts: {customer}
    current Task: create a Output/models.py file with the following instructions:
    1) Use the "FileReaderTool" tool exactly once to read the "templates/models_template.py" file 
      Then strictly follow that template's structure, 
      only filling in the designated placeholders (examples) with your actual model definitions.
    2) Define Models as per the requirement of the customer.
      Add primary key to each model.
      Each Model should have all the fields as per the requirement of the customer
      and have a "to_dict" Method.
  expected_output: >
    Your Final answer must be the full Output/model.py file, only the python code and nothing else.
  agent: code_creator
  output_file: Output/models.py

backend_app_task:
  description: >
    main goal: {goal}
    the topic of the application: {topic}
    customers thoughts: {customer}
    current Task: create an Output/app.py file with the  following instructions:
    1) Use the "FileReaderTool" tool exactly once to read the "templates/app_template.py" file
      Then strictly follow that template's structure, 
      only filling in the designated placeholders with your code (example).
      You may add new routes, but do not alter the overall layout.
      You may add new model imports as needed.
    2) Define the endpoints as per the requirement of the customer.
      The resulting "Output/app.py" must:
      - import the models from the models.py file.
      - have every route as per the requirement of the customer.
      - be fully operational and error free.
  expected_output: >
    Your Final answer must be the full Output/app.py file, only the python code and nothing else.
  agent: code_creator
  output_file: Output/app.py

# review_task:
#   description: >
#     main goal: {goal}
#     the topic of the application: {topic}
#     customers thoughts: {customer}
#     current Task:
#     Using the code you got, check for errors. Check for syntax errors,
#     missing imports, variable declarations, mismatched brackets.
#     The goal is to ensure that the code is perfect and ready for deployment.
#     Use the "file_writer_tool" to update the code with your corrections.
#   expected_output: >
#     Your Final answer must be the full python code, only the python code and nothing else.
#   agent: qa_engineer_agent
#   context: [backend_models_task, backend_app_task]

# evaluate_task:
#   description: >
#     main goal: {goal}
#     the topic of the application: {topic}
#     customers thoughts: {customer}
#     current Task:
#     You are helping to create a fully fledged python backend-application.
#     The application should:
#       - provide CRUD operations for the topic
#       - use an SQLite database
#       - accesaible via REST API
#       - be fully operational
#       - be clean and well-structured

#     You will look over the code to insure that it is complete and
#     does the job that it is supposed to do.
#   expected_output: >
#     Your Final answer must be the full python code, only the python code and nothing else.
#   agent: chief_qa_engineer_agent