# bug_fixer

analyze_python_code_task:
  description: >
    **Failed tests / traces:** (it's a {test_result_type})
      {test_result}

    Here are the backend source files you must inspect:

    **models.py**
    """{models_py}"""

    **app.py**
    """{app_py}"""

    Your mission:
      1. Using the failed test information, pinpoint in *models.py* or *app.py*
         where each failure originates (line numbers or function/class names).
      2. Classify every root cause (missing field, wrong relationship, faulty
         route logic, etc.).
      3. For each failure, suggest a fix (e.g. add a field, change a relationship,
         modify a route, etc.).
      4. Produce a structured **Markdown report** titled "Python Issue Report"
         with a table:

         | # | File & location | Failing request | Root cause | Suggested fix |
         |---|-----------------|-----------------|------------|---------------|

    Do **not** propose JSON patches here.

  expected_output: >
    A Markdown document that becomes the *context* for the next task.
    It includes the cause of the failures, the location in the code, and a suggested fix.
  agent: bug_analyzer
  output_file: Output/bug_Fix_crew/Python_Issue_Report.md

fix_code_task:
  description: >
    **Failed tests / traces:** (it's a {test_result_type})
      {test_result}

    Use the context from the previous task to identify
    which of these JSON specs require changes:
      • Output/backendCrew/routes.json

      {routes_json}

      • Output/backendCrew/models.json

      {models_json}

    **Goal :** Every failed test must be fixed after this task.
      Produce a single JSON payload (schema = BulkTestClientInput)
      that the system will pass to the *JsonPatchTool* tool via callback.

    For every required change create an RFC-6902 operation
      {
        "file_path": "Output/backendCrew/routes.json",
        "patch": [ { "op": "replace", "path": "/topic", "value": "Soccer" } ]
      }
    Do NOT mix patches from different files in the same object.

  expected_output: >
    Return a valid JSON object matching the `Verification` schema:
    {
      models: { // can be 'null' when nothing to fix
        "file_path": "Output/backendCrew/models.json",
        "patch": [ { "op": "replace", "path": "/topic", "value": "Soccer" } ] 
      },
      routes: { // can be 'null' when nothing to fix
        "file_path": "Output/backendCrew/routes.json",
        "patch": [ { "op": "replace", "path": "/topic", "value": "Soccer" } ] 
      }
    }

  agent: bug_analyzer
  output_file: Output/bug_Fix_crew/fix_summary.md
