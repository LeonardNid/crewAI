# bug_fixer

analyze_python_code_task:
  description: >
    **Failed tests / traces:** (it's a {test_result_type})
      {test_result}

    Here are the backend source files you must inspect:

    **models.py**
    """{models_py}"""

    **app.py**
    """{app_py}"""

    Your mission:
      1. Using the failed test information, pinpoint in *models.py* or *app.py*
         where each failure originates (line numbers or function/class names).
      2. Classify every root cause (missing field, wrong relationship, faulty
         route logic, etc.).
      3. Produce a structured **Markdown report** titled "Python Issue Report"
         with a table:

         | # | File & location | Failing request | Root cause | Suggested fix |
         |---|-----------------|-----------------|------------|---------------|

    Do **not** propose JSON patches here.

  expected_output: >
    A Markdown document that becomes the *context* for the next task.
    It includes the cause of the failures, the location in the code, and a suggested fix.
  agent: bug_analyzer

fix_code_task:
  description: >
    **Failed tests / traces:** (it's a {test_result_type})
      {test_result}

    Use the context from the previous task to identify
    which of these JSON specs require changes:
      • Output/backendCrew/routes.json

      {routes_json}

      • Output/backendCrew/models.json

      {models_json}

    You MUST patch the files with the tool **json_patch_update**

    Steps:
      1. For every required change create an RFC-6902 operation
          {
            "file_path": "Output/backendCrew/routes.json",
            "patch": [ { "op": "replace", "path": "/topic", "value": "Soccer" } ]
          }
        Do NOT mix patches from different files in the same call.
      2. Call json_patch_update **once per file** and pass:
         {
           "file_path": "<one of the two JSON files>",
           "patch": [ { ... }, { ... } ] 
         }
      3. After the Tool calls you have to summaries the changes in a Markdown file.
         - Include which JSON file(s) were patched.
         - Include the JSON-Pointer paths you changed (e.g. "/endpoints/2/methods/1").
         - Include what excactly was changed.

    Your work is only finished if all the following conditions are met:
      - You have called the tool **json_patch_update** at least once.
      - You have provided a Markdown summary of the changes made.
      - The JSON files are valid after your changes.
      - Most importantly, ALL tests pass after your changes.

  expected_output: >
    Your final answer must confirm:
      - Which JSON file(s) were patched
      - The JSON-Pointer paths you changed (e.g. "/endpoints/2/methods/1")
      - The success message(s) from json_patch_update

  agent: bug_analyzer
  output_file: Output/bug_Fix_crew/fix_summary.md
