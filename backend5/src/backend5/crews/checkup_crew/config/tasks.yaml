# ──────────────────────────────────────────────────────────────────────────────
#  BRANCH VERIFIER TASK
# ──────────────────────────────────────────────────────────────────────────────

branch_verification_task:
  description: >
    This is the routes.json file:
    {routes_json}

    Your mission is to **carefully verify the behavior** of each endpoint branch in the API specification.

    1. For every element in the "endpoints" array:
         • Read the `description` and understand the expected behavior.
         • Validate the **body code** inside each branch (ignore function headers).
           This step is crucial for the correctness of the API and the satisfaction of the customer.
           Be very thorough and precise in your analysis.

    2. If you find ANY mismatch between description and branch code:
         • You MUST invoke the tool **json_patch_update** during task execution (not in your text output).
         • You MUST build the correct "Action Input" payload and actually CALL the tool, not describe it.

    3. Tool Call Requirements:
         - All detected issues must be bundled into a single json_patch_update call.
         - Example payload structure:
         ```
         {
          "file_path": "Output/backendCrew/routes.json",
          "patch": [
            { 
             "op": "replace",
             "path": "/topic",
             "value": "Soccer" 
             } 
           ]
         }
         ```
         - Calling json_patch_update is mandatory if any fixes are needed.
         - the file_path must be "Output/backendCrew/routes.json".

    **CRITICAL RULES**:
    - You MUST not only describe the patch but truly EXECUTE the json_patch_update tool.
    - Merely writing out the JSON does NOT count.
    - DON'T wrap the calling of the tool in ```Action:json_patch_update``` or any other quotes.

  expected_output: >
    - NEVER give the input of the json_patch_update tool as your final answere.
    - If corrections were needed: Summarize the changes.
    - If no corrections were needed: Explicitly state that no changes were needed.

  agent: branch_verifier
  # output_file: Output/checkupCrew/refinement_Summary.md



# ──────────────────────────────────────────────────────────────────────────────
#  VERIFICATION AGENT TASK
# ──────────────────────────────────────────────────────────────────────────────

verification_task:
  description: >
    Feature checklist for the customer:
    {feature_checklist}

    models.json file:
    {models_json}

    routes.json file:
    {routes_json}

    You must output:
      {
        "retry": <true/false>,
        "defects": [
          // ONLY defects that satisfy ALL rules below
        ]
      }

    **DEFECT RULES - read carefully**
      1. A feature counts as implemented if at least one endpoint
         satisfies the semantics below -
         • "Retrieve list": GET /<plural> with get_List = true
         • "Retrieve details": GET /<plural>/<id>
         • "Create": POST on the plural path
         • "Update": PUT on the id path
         • "Delete": DELETE on the id path
         • "Filter": any GET containing '/filter/' OR a path segment
           representing the filter field (e.g., /players/country/<val>)
      2. Ignore wording-variations in descriptions.
      3. json_body evaluation
         • Inspect json_body **only for POST & PUT**.
         • Never demand json_body for GET or DELETE routes.
         • A json_body is valid if it contains all required fields coresponding
           to the model in the models.json file.
      4. Every reported defect MUST include:
           - the feature number from feature_checklist.md
           - the exact endpoint path(s) inspected
           - a one-line justification
         Otherwise discard it.
      5. Do not invent additional requirements, max defects == feature count.

      Return retry: true if you find any issues, and retry: false if everything is fine.
  expected_output: >
    Return a valid JSON object matching the `Verification` schema:
    {
      "retry": <true/false>,
      "defects": [<list of strings, or empty>]
    }
  agent: verification_agent
  output_file: Output/checkupCrew/verification_result.json
