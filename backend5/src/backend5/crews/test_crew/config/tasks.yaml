# code_tester

backend_endpoint_summary_task:
  description: >
    Here is the models.json file containing all backend models:
    """{models_json}"""

    Here is the routes.json file containing all API routes:
    """{routes_json}"""

    Your mission is to create a strict execution plan for API endpoint testing.

    1. List every route's URL (e.g., /teams, /teams/<id>) and HTTP method(s) (GET, POST, PUT, DELETE).
    
    2. For every POST and PUT method:
         - List the required JSON fields and their types based on the model schema.
         - Example: "POST /teams -> Needs { name: string, city: string }"

    3. **VERY IMPORTANT**:
         - You MUST strictly order routes for each model as follows:
           1. All POST methods first
           2. Then all GET methods
           3. Then all PUT methods
           4. Finally all DELETE methods
         - **Under no circumstances should a DELETE method appear before any GET or PUT.**

    4. Special rule for DELETE methods:
         - Analyze the `models.json` file to find dependency relationships (e.g., a Team has Players).
         - DELETE routes must be ordered so that child resources are deleted BEFORE their parents.
         - Example: DELETE all /players before DELETE /teams.
         - Failing to respect this dependency is considered a task failure.

    5. The final output must be a numbered list that follows this exact order.
         - No section headers, no unordered lists.
         - Strictly numeric and sequential (1., 2., 3., etc.)

    **CRITICAL NOTES**:
      - Breaking the POST→GET→PUT→DELETE sequence is a critical mission failure.
      - Breaking dependency order in DELETE methods is a critical mission failure.
      - Re-read your answer to verify the correct order BEFORE submitting.

  expected_output: >
    A strictly numbered Markdown list of routes, including:
      - HTTP method
      - Path (with path parameters)
      - Expected JSON fields for POST/PUT
      - Any important response details you can infer.

    Example:
      "1. POST /teams -> Needs { name: string, city: string, country: string, stadium: string }
       Returns: newly created team data."
  agent: code_tester
  output_file: 'Output/test_crew/endpoint_summary.md'


backend_test_task:
  description: >
    Use the "flask_test_client" tool to test the backend application based on the endpoint summary in your context.
    
    Your responsibilities:
      1. Read the endpoint summary carefully.
         For each route listed, construct an HTTP request definition.
         **Important:**
         - Use `"json_data"` for the JSON body (do not pass a stringified JSON; pass an actual JSON object).
         - For routes that require a JSON body (POST/PUT), include a valid JSON object based on the expected fields.
         - For routes with URL parameters (e.g., `/teams/<id>`), use `1` as a default value (e.g., `/teams/1`).
      2. Combine all request definitions into a single list and pass them to the tool in one bulk call.
         - All POST routes first, then GET, then PUT, then DELETE.
         - It is extremely important to follow this order.
      3. You MUST provide one list of HTTP request definitions. Each request MUST include:
         - "method": The HTTP method to use (GET, POST, PUT, DELETE)
         - "route": The full route, e.g., "/teams" or "/players/1"
         - "json_data": The request payload as a dictionary (optional for GET/DELETE)
      
         Example:
          {
            "method": "POST",
            "route": "/teams",
            "json_data": {
              "name": "Test FC",
              "city": "Berlin",
              "country": "Germany",
              "stadium": "Olympiastadion"
            }
          }

      4. If the tool returns a validation error you have to:
         - think about your input for the tool.
         - correct the input and run the tool again.
         - try again until you don't get any validation errors.
  expected_output: >
    Your final answere is the output of the Tool: "flask_test_client"
    only if the tool didn't return a validation error.
  agent: code_tester
  context: [backend_endpoint_summary_task]
  output_file: 'Output/test_crew/test_report.md'
