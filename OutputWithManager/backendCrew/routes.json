{
    "topic": "Library Management Application",
    "endpoints": [
        {
            "path": "/books",
            "methods": [
                "GET",
                "POST"
            ],
            "model": "Book",
            "get_List": true,
            "json_body": {
                "title": "string",
                "author": "string",
                "isbn": "string",
                "genre": "string",
                "publication_year": "integer"
            },
            "description": "List all books or add a new book",
            "idx": 0,
            "handler_name": "books",
            "params": "",
            "branches": {
                "GET": "objs = Book.query.all()\nreturn jsonify([o.to_dict() for o in objs])",
                "POST": "data = request.get_json()\nnew_obj = Book(**data)\ndb.session.add(new_obj)\ndb.session.commit()\nreturn jsonify(new_obj.to_dict()), 201"
            }
        },
        {
            "path": "/books_<int:id>",
            "methods": [
                "GET",
                "PUT",
                "DELETE"
            ],
            "model": "Book",
            "get_List": false,
            "json_body": {
                "title": "string",
                "author": "string",
                "isbn": "string",
                "genre": "string",
                "publication_year": "integer"
            },
            "description": "Retrieve, update, or delete a specific book by ID",
            "idx": 1,
            "handler_name": "books_int_id",
            "params": "id",
            "branches": {
                "GET": "obj = Book.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Book not found\"}), 404\nreturn jsonify(obj.to_dict())",
                "PUT": "obj = Book.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Book not found\"}), 404\ndata = request.get_json()\nfor k, v in data.items():\n    setattr(obj, k, v)\ndb.session.commit()\nreturn jsonify(obj.to_dict())",
                "DELETE": "obj = Book.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Book not found\"}), 404\ndb.session.delete(obj)\ndb.session.commit()\nreturn jsonify({\"message\": \"Book deleted\"})"
            }
        },
        {
            "path": "/books_search",
            "methods": [
                "GET"
            ],
            "model": "Book",
            "get_List": true,
            "json_body": null,
            "description": "Search books by title or author using query parameters ?title= or ?author=",
            "idx": 2,
            "handler_name": "books_search",
            "params": "",
            "branches": {
                "GET": "title = request.args.get('title')\nauthor = request.args.get('author')\nquery = Book.query\nif title:\n    query = query.filter(Book.title.ilike(f'%{title}%'))\nif author:\n    query = query.filter(Book.author.ilike(f'%{author}%'))\nobjs = query.all()\nreturn jsonify([o.to_dict() for o in objs])"
            }
        },
        {
            "path": "/members",
            "methods": [
                "GET",
                "POST"
            ],
            "model": "Member",
            "get_List": true,
            "json_body": {
                "name": "string",
                "email_address": "string",
                "membership_number": "string",
                "membership_expiration_date": "string"
            },
            "description": "List all members or add a new member",
            "idx": 3,
            "handler_name": "members",
            "params": "",
            "branches": {
                "GET": "objs = Member.query.all()\nreturn jsonify([o.to_dict() for o in objs])",
                "POST": "data = request.get_json()\nnew_obj = Member(**data)\ndb.session.add(new_obj)\ndb.session.commit()\nreturn jsonify(new_obj.to_dict()), 201"
            }
        },
        {
            "path": "/members_<int:id>",
            "methods": [
                "GET",
                "PUT",
                "DELETE"
            ],
            "model": "Member",
            "get_List": false,
            "json_body": {
                "name": "string",
                "email_address": "string",
                "membership_number": "string",
                "membership_expiration_date": "string"
            },
            "description": "Retrieve, update or delete a specific member by ID",
            "idx": 4,
            "handler_name": "members_int_id",
            "params": "id",
            "branches": {
                "GET": "obj = Member.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Member not found\"}), 404\nreturn jsonify(obj.to_dict())",
                "PUT": "obj = Member.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Member not found\"}), 404\ndata = request.get_json()\nfor k, v in data.items():\n    setattr(obj, k, v)\ndb.session.commit()\nreturn jsonify(obj.to_dict())",
                "DELETE": "obj = Member.query.get(id)\nif not obj:\n    return jsonify({\"message\": \"Member not found\"}), 404\ndb.session.delete(obj)\ndb.session.commit()\nreturn jsonify({\"message\": \"Member deleted\"})"
            }
        },
        {
            "path": "/loans_borrow",
            "methods": [
                "POST"
            ],
            "model": "Loan",
            "get_List": false,
            "json_body": {
                "book_id": "integer",
                "member_id": "integer",
                "checkout_date": "string",
                "due_date": "string"
            },
            "description": "Borrow a book",
            "idx": 5,
            "handler_name": "loans_borrow",
            "params": "",
            "branches": {
                "POST": "data = request.get_json()\nnew_obj = Loan(**data)\ndb.session.add(new_obj)\ndb.session.commit()\nreturn jsonify(new_obj.to_dict()), 201"
            }
        },
        {
            "path": "/loans_return",
            "methods": [
                "POST"
            ],
            "model": "Loan",
            "get_List": false,
            "json_body": {
                "book_id": "integer",
                "member_id": "integer"
            },
            "description": "Return a borrowed book",
            "idx": 6,
            "handler_name": "loans_return",
            "params": "",
            "branches": {
                "POST": "data = request.get_json()\n# Find the active loan for the book and member, then mark it as returned\nloan = Loan.query.filter_by(book_id=data['book_id'], member_id=data['member_id'], return_date=None).first()\nif not loan:\n    return jsonify({'message': 'No active loan found for this book and member'}), 404\nloan.return_date = data.get('return_date', None) or \"today's date\"\ndb.session.commit()\nreturn jsonify(loan.to_dict())"
            }
        },
        {
            "path": "/loans_overdue",
            "methods": [
                "GET"
            ],
            "model": "Loan",
            "get_List": true,
            "json_body": null,
            "description": "List all overdue loans",
            "idx": 7,
            "handler_name": "loans_overdue",
            "params": "",
            "branches": {
                "GET": "today = datetime.date.today()\nobjs = Loan.query.filter(Loan.due_date < today, Loan.return_date == None).all()\nreturn jsonify([o.to_dict() for o in objs])"
            }
        }
    ],
    "models_import": "Book, Member, Loan"
}